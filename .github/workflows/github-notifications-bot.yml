name: Telegram Notification on Push and Pull Request Events

on:
  push:
    branches:
      - main
      - next
  pull_request_target:
    types: [opened, closed]

jobs:
  notify-telegram:
    runs-on: ubuntu-latest
    steps:
      - name: Send Telegram Message
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_TARGETS: ${{ vars.TELEGRAM_TARGETS }}
        run: |
          # CORRECT HTML ESCAPE FUNCTION ‚Äî THIS WAS BROKEN BEFORE
          html_escape() {
            echo "$1" | sed 's/&/\&amp;/g; s/</\</g; s/>/\>/g; s/"/\&quot;/g; s/'"'"'/\&#39;/g'
          }

          LOG_BUFFER=""
          log() {
            LOG_BUFFER+="$1"$'\n'
          }

          if [[ "${{ github.event_name }}" == "push" ]]; then
            BRANCH=$(html_escape "${{ github.ref_name }}")
            ACTOR=$(html_escape "${{ github.actor }}")

            # TRIM SPACES FROM COMPARE URL ‚Äî CRITICAL
            COMPARE_URL="${{ github.event.compare }}"
            COMPARE_URL="${COMPARE_URL#"${COMPARE_URL%%[![:space:]]*}"}"   # trim leading
            COMPARE_URL="${COMPARE_URL%"${COMPARE_URL##*[![:space:]]}"}"   # trim trailing

            EVENT_STATUS="üîî <b>New Push to $BRANCH</b>"

            # GET COMMITS SAFELY
            COMMITS_RAW=$(echo '${{ toJSON(github.event.commits) }}' | jq -r '.[] | "- " + (.message | gsub("\n"; " ") | gsub("\r"; " ") | gsub("\""; "\\\"")) + " (" + (.id | .[0:7]) + ")"' | head -n 10)

            ESCAPED_COMMITS=""
            while IFS= read -r line; do
              if [[ -n "$line" ]]; then
                if [[ "$line" =~ \(([a-f0-9]{7})\)$ ]]; then
                  HASH="${BASH_REMATCH[1]}"
                  PREFIX="${line% (*}"
                  ESC_PREFIX=$(html_escape "$PREFIX")
                  ESC_HASH=$(html_escape "$HASH")
                  ESCAPED_COMMITS+="$ESC_PREFIX (<code>$ESC_HASH</code>)"$'\n'
                else
                  ESCAPED_COMMITS+=$(html_escape "$line")$'\n'
                fi
              fi
            done <<< "$COMMITS_RAW"

            MESSAGE="$EVENT_STATUS%0A%0Aüë§ By: $ACTOR%0Aüîó <a href=\"$COMPARE_URL\">View Commits</a>%0A%0A<b>Commits:</b>%0A$ESCAPED_COMMITS"

          else
            ACTOR=$(html_escape "${{ github.actor }}")
            PR_TITLE=$(html_escape "${{ github.event.pull_request.title }}")
            PR_URL="${{ github.event.pull_request.html_url }}"
            PR_NUMBER="${{ github.event.pull_request.number }}"

            if [[ "${{ github.event.action }}" == "opened" ]]; then
              PR_STATUS="üì¢ <b>New Pull Request Opened</b>"
            elif [[ "${{ github.event.action }}" == "closed" && "${{ github.event.pull_request.merged }}" == "true" ]]; then
              PR_STATUS="‚úÖ <b>Pull Request Merged</b>"
            else
              PR_STATUS="‚ùå <b>Pull Request Closed Without Merging</b>"
            fi

            COMMITS_RAW=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/commits" \
              | jq -r '.[] | "- " + (.commit.message | gsub("\n"; " ") | gsub("\r"; " ") | gsub("\""; "\\\"")) + " (" + (.sha | .[0:7]) + ")"' \
              | head -n 10)

            ESCAPED_COMMITS=""
            while IFS= read -r line; do
              if [[ -n "$line" ]]; then
                if [[ "$line" =~ \(([a-f0-9]{7})\)$ ]]; then
                  HASH="${BASH_REMATCH[1]}"
                  PREFIX="${line% (*}"
                  ESC_PREFIX=$(html_escape "$PREFIX")
                  ESC_HASH=$(html_escape "$HASH")
                  ESCAPED_COMMITS+="$ESC_PREFIX (<code>$ESC_HASH</code>)"$'\n'
                else
                  ESCAPED_COMMITS+=$(html_escape "$line")$'\n'
                fi
              fi
            done <<< "$COMMITS_RAW"

            MESSAGE="$PR_STATUS%0A%0Aüë§ By: $ACTOR%0ATitle: $PR_TITLE%0Aüîó <a href=\"$PR_URL\">View Pull Request</a>%0A%0A<b>Commits:</b>%0A$ESCAPED_COMMITS"
          fi

          # Prepare debug info (only shown on failure)
          DECODED_MESSAGE=$(echo "$MESSAGE" | sed 's/%0A/\n/g')
          log "=== GitHub Event Details ==="
          log "Event: ${{ github.event_name }}"
          log "Action: ${{ github.event.action }}"
          log "Actor: ${{ github.actor }}"
          log "Repository: ${{ github.repository }}"
          log "Ref: ${{ github.ref_name }}"
          log ""
          log "=== Telegram Message (decoded) ==="
          log "$DECODED_MESSAGE"
          log ""

          IFS=',' read -ra TARGETS <<< "$TELEGRAM_TARGETS"
          log "Targets: $TELEGRAM_TARGETS"

          SEND_FAILED=false

          for TARGET in "${TARGETS[@]}"; do
            if [[ "$TARGET" == *"^"* ]]; then
              CHAT_ID=$(echo "$TARGET" | cut -d'^' -f1)
              TOPIC_ID=$(echo "$TARGET" | cut -d'^' -f2)
            else
              CHAT_ID="$TARGET"
              TOPIC_ID=""
            fi

            # üî• NO SPACE AFTER "bot" ‚Äî THIS WAS BREAKING THINGS
            RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendMessage" \
              -d "chat_id=$CHAT_ID" \
              ${TOPIC_ID:+-d "message_thread_id=$TOPIC_ID"} \
              -d "parse_mode=HTML" \
              -d "text=$MESSAGE")

            if echo "$RESPONSE" | grep -q '"ok":true'; then
              echo "‚úÖ Notification sent."
            else
              SEND_FAILED=true
              ERROR_DESC=$(echo "$RESPONSE" | jq -r '.description // "unknown"' 2>/dev/null)
              log "‚ùå Failed to $CHAT_ID: $ERROR_DESC"
              log "Response: $RESPONSE"
            fi
          done

          if [[ "$SEND_FAILED" == "true" ]]; then
            echo "‚ùå Job failed. Debug logs:"
            echo "$LOG_BUFFER"
            exit 1
          else
            echo "‚úÖ All notifications sent."
          fi